+ vs *
* means 0 or more
+ mean 1 or more which means there should be atleast 1 digit

---------------------------------------------------------------

flex bison are not any programming language, they are tools

the responsibility of lex/flex is to generate tokens
the responsibility of bison/yacc is to parse/match pattern/check grammar


----------------------------------------------------------------

lex filename
gcc lex.yy.c
a

make main

----------------------------------------------------------------

%{
void yyerror(char *s);
int yylex();   
%} 

in .y file writing doesn't necessarily mean we will call these function
but it is to re-ensure that these functions do exist in some files 

yacc does parsing (yacc parsing kore) -> matches grammar (grammar match kore dekhe)

we write rules in yacc file (.y)

------------------------------------------------------------------------------

delim [ \t]
ws {delim}+

is used to remove whitespacess

-------------------------------------------------------------------------------

Another name of token is terminal (jeita match korabo)
rules are non terminal

cal: exp // non terminal
exp: NUM ADD NUM // terminal

----------------------------------------------------------------------------------

yacc -d cal.y // generates header file
header file will assign numerical value (randomly generated) to tokens (NUM, ADD, SUB)
then to link this value to lex file we will include the header file in the lex file
other wise lex won't understand what to return